{
	"info": {
		"_postman_id": "04c196ef-5465-44d5-84f7-8564e8e294b8",
		"name": "Express-demo-collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38003990"
	},
	"item": [
		{
			"name": "Create actor functionality",
			"item": [
				{
					"name": "Actor created successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//tai Postman funkcija, kuri grąžina JSON formato atsakymą iš API",
									"const responseJson = pm.response.json()",
									"//is request padarome json",
									"const requestBody = pm.request.body.raw;",
									"const requestJson = JSON.parse(requestBody);",
									"",
									"pm.collectionVariables.set('actorId', responseJson.id)",
									"pm.collectionVariables.set('actorName',requestJson.name)",
									"pm.collectionVariables.set('actorSurname',requestJson.surname)",
									"",
									"pm.test(\"Check that returned data is correct\", () => {",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);",
									"    pm.expect(responseJson.name).to.eql(requestJson.name);",
									"    pm.expect(responseJson.surname).to.eql(requestJson.surname);",
									"})",
									"",
									"pm.test(\"Date of birth is correctly parsed\", () => {",
									"    const dateOfBirth = new Date(responseJson.date_of_birth);",
									"    pm.expect(dateOfBirth.getFullYear()).to.eql(1980);",
									"});",
									"",
									"pm.test(\"Response status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2 seconds\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"name\": \"John\",\n        \"surname\": \"Doe\",\n        \"dateOfBirth\": \"1980-01-15\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actor",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the created actor by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"actor_id = pm.collectionVariables.get('actorId')",
									"console.log(actor_id)",
									"",
									"pm.test('check if returned actor has correct id', () => {",
									"    const data = pm.response.json()",
									"    pm.expect(data.id).to.be.eql(actor_id)",
									"})",
									"",
									"pm.test(\"Name and surname match input\", () => {",
									"    const responseJSON = pm.response.json();",
									"    const firstName = pm.collectionVariables.get(\"actorName\");",
									"    const surname = pm.collectionVariables.get(\"actorSurname\");",
									"",
									"    console.log('Response name:', responseJSON.name);",
									"    console.log('Expected name:', firstName);",
									"    console.log('Response surname:', responseJSON.surname);",
									"    console.log('Expected surname:', surname);",
									"",
									"    // Patikrinkite, ar `name` ir `surname` atitinka kintamųjų reikšmes",
									"    pm.expect(responseJSON.name).to.eql(firstName);",
									"    pm.expect(responseJSON.surname).to.eql(surname);",
									"});",
									"",
									"pm.test('Date of birth is present and not empty', () => {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('date_of_birth').that.is.not.empty;",
									"});",
									"",
									"pm.test('\"Response time is less than 2 seconds', () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000)",
									"}) ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actor/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the list of created actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200)",
									"})",
									"",
									"pm.test('\"Response time is less than 2 seconds', () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000)",
									"}) ",
									"",
									"pm.test(\"Check if name, surname, and ID are correct\", () => {",
									"    // Gauk kintamuosius iš kolekcijos ar aplinkos",
									"    const actorId = pm.collectionVariables.get(\"actorId\").toString(); // Konvertuoti į string",
									"    const name = pm.collectionVariables.get(\"actorName\"); ",
									"    const surname = pm.collectionVariables.get(\"actorSurname\");",
									"",
									"    // Gauk JSON atsakymą iš užklausos",
									"    const jsonData = pm.response.json();",
									"",
									"    // Atspausdink atsakymo JSON struktūrą ir kintamuosius",
									"    console.log('Actor ID:', actorId);",
									"    console.log('Response JSON:', jsonData);",
									"",
									"    // Patikrink, ar bent vienas elementas atitinka ID, vardą ir pavardę",
									"    const found = jsonData.some(function (item) {",
									"        return item.id.toString() === actorId && item.name === name && item.surname === surname;",
									"    });",
									"",
									"    // Testas bus laikomas sėkmingu, jei elementas buvo rastas",
									"    pm.expect(found, 'Record not found in response').to.be.true;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actor",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an actor with an incorrect birth date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"})",
									"pm.test(\"Returns correct text\", () => {",
									"    pm.expect(pm.response.text()).to.eql('Date of birth cannot be in the future')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n        \"name\": \"Jane\",\n        \"surname\": \"Smith\",\n        \"dateOfBirth\": \"2025-03-22\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actor",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update actor functionality",
			"item": [
				{
					"name": "Create a new actor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//tai Postman funkcija, kuri grąžina JSON formato atsakymą iš API",
									"const responseJson = pm.response.json()",
									"//is request padarome json",
									"const requestBody = pm.request.body.raw;",
									"const requestJson = JSON.parse(requestBody);",
									"",
									"pm.collectionVariables.set('actorId', responseJson.id)",
									"pm.test(\"Check that returned data is correct\", () => {",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);",
									"    pm.expect(responseJson.name).to.eql(requestJson.name);",
									"    pm.expect(responseJson.surname).to.eql(requestJson.surname);",
									"})",
									"",
									"pm.test(\"Response status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2 seconds\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"name\": \"Chris\",\n        \"surname\": \"Wilson\",\n        \"dateOfBirth\": \"1982-11-05\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actor",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successfully update actor information by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2 seconds\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"const responseJson = pm.response.json()",
									"const requestBody = pm.request.body.raw;",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"pm.collectionVariables.set('actorName',requestJson.name)",
									"pm.collectionVariables.set('actorSurname',requestJson.surname)",
									"",
									"pm.test(\"Check that returned data is correct\", () => {",
									"    const actorId = pm.collectionVariables.get(\"actorId\") // Fixed the reference error for actorId",
									"    pm.expect(responseJson.id).to.eql(actorId) // Fixed the reference error for id",
									"    pm.expect(responseJson.name).to.eql(requestJson.name);",
									"    pm.expect(responseJson.surname).to.eql(requestJson.surname);",
									"})",
									"",
									"// const responseJson = pm.response.json();",
									"// const requestBody = pm.request.body.raw;",
									"// const requestJson = JSON.parse(requestBody);",
									"",
									"// // Nustatyk kolekcijos kintamuosius (jei reikia juos naudoti vėliau)",
									"// pm.collectionVariables.set('actorName', requestJson.name);",
									"// pm.collectionVariables.set('actorSurname', requestJson.surname);",
									"",
									"// // Testavimas, ar grąžinti duomenys yra teisingi",
									"// pm.test(\"Check that returned data is correct\", () => {",
									"//     // Gauk kintamuosius iš kolekcijos arba atsakymo",
									"//     const actorId = pm.collectionVariables.get(\"actorId\"); ",
									"",
									"//     // Patikrink, ar atsakymas turi laukus",
									"//     pm.expect(responseJson).to.have.property(\"id\", actorId);",
									"//     pm.expect(responseJson).to.have.property(\"name\", requestJson.name);",
									"//     pm.expect(responseJson).to.have.property(\"surname\", requestJson.surname);",
									"// });",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"name\": \"Mari\",\n        \"surname\": \"Wilson\",\n        \"dateOfBirth\": \"1992-11-05\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actor/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the created actor by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Name and surname update correct\", () => {",
									"    const responseJSON = pm.response.json();",
									"    const firstName = pm.collectionVariables.get(\"actorName\");",
									"    const surname = pm.collectionVariables.get(\"actorSurname\");",
									"",
									"    // Patikrinkite, ar `name` ir `surname` atitinka kintamųjų reikšmes",
									"    pm.expect(responseJSON.name).to.eql(firstName);",
									"    pm.expect(responseJSON.surname).to.eql(surname);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actor/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the list of created actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200)",
									"})",
									"",
									"pm.test('\"Response time is less than 2 seconds', () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000)",
									"}) ",
									"",
									"pm.test(\"Check if update request info is correct\", () => {",
									"    const actorId = pm.collectionVariables.get(\"actorId\").toString();",
									"    const name = pm.collectionVariables.get(\"actorName\"); ",
									"    const surname = pm.collectionVariables.get(\"actorSurname\");",
									"",
									"    const jsonData = pm.response.json();",
									"",
									"    const found = jsonData.some(function (item) {",
									"        return item.id.toString() === actorId && item.name === name && item.surname === surname;",
									"    });",
									"",
									"    pm.expect(found, 'Record not found in response').to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actor",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upadate actor id which not existed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 404\", () => {",
									"    pm.expect(pm.response.code).to.eql(404)",
									"})",
									"pm.test(\"Returns correct text\", () => {",
									"    pm.expect(pm.response.text()).to.eql('Actor not found')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"name\": \"Mari\",\n        \"surname\": \"Wilson\",\n        \"dateOfBirth\": \"1992-11-05\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actor/9999999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor",
								"9999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete actor functionality",
			"item": [
				{
					"name": "Create an actor entry for deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//tai Postman funkcija, kuri grąžina JSON formato atsakymą iš API",
									"const responseJson = pm.response.json()",
									"//is request padarome json",
									"const requestBody = pm.request.body.raw;",
									"const requestJson = JSON.parse(requestBody);",
									"",
									"pm.collectionVariables.set('actorId', responseJson.id)",
									"pm.collectionVariables.set('actorName',requestJson.name)",
									"pm.collectionVariables.set('actorSurname',requestJson.surname)",
									"",
									"pm.test(\"Check that returned data is correct\", () => {",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);",
									"    pm.expect(responseJson.name).to.eql(requestJson.name);",
									"    pm.expect(responseJson.surname).to.eql(requestJson.surname);",
									"})",
									"",
									"pm.test(\"Response status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2 seconds\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"name\": \"Chris\",\n        \"surname\": \"Wilson\",\n        \"dateOfBirth\": \"1982-11-05\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actor",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an actor by an existing ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 204\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", () => {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actor/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the created actor by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleting a non-existent actor returns 404 status code\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body('Actor not found');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actor/{{actorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the list of created actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET all actors should not include deleted actor\", () =>  {",
									"    pm.sendRequest({",
									"        url: 'http://localhost:3000/actor',",
									"        method: 'GET'",
									"    }, function (err, res) {",
									"        const actors = res.json();",
									"        const deletedActorId = pm.collectionVariables.get(\"actorIdToDelete\");",
									"",
									"        // Patikrinkite, ar sąraše nėra ištrinto aktoriaus",
									"        const actorExists = actors.some(actor => actor.id === parseInt(deletedActorId));",
									"        pm.expect(actorExists).to.be.false; // Tikrina, ar ištrintas aktorius nerandamas sąraše",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actor",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting an actor with an ID that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 404\", () => {",
									"    pm.expect(pm.response.code).to.eql(404)",
									"})",
									"pm.test(\"Returns correct text\", () => {",
									"    pm.expect(pm.response.text()).to.eql('Actor not found')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/actor/100000000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor",
								"100000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create movie functionality",
			"item": [
				{
					"name": "Actor created successfully Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//tai Postman funkcija, kuri grąžina JSON formato atsakymą iš API",
									"const responseJson = pm.response.json()",
									"//is request padarome json",
									"const requestBody = pm.request.body.raw;",
									"const requestJson = JSON.parse(requestBody);",
									"",
									"pm.collectionVariables.set('actorId', responseJson.id)",
									"pm.collectionVariables.set('actorName',requestJson.name)",
									"pm.collectionVariables.set('actorSurname',requestJson.surname)",
									"",
									"pm.test(\"Check that returned data is correct\", () => {",
									"    pm.expect(responseJson.id).to.be.a('number').and.be.above(0);",
									"    pm.expect(responseJson.name).to.eql(requestJson.name);",
									"    pm.expect(responseJson.surname).to.eql(requestJson.surname);",
									"})",
									"",
									"pm.test(\"Date of birth is correctly parsed\", () => {",
									"    const dateOfBirth = new Date(responseJson.date_of_birth);",
									"    pm.expect(dateOfBirth.getFullYear()).to.eql(1980);",
									"});",
									"",
									"pm.test(\"Response status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2 seconds\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"name\": \"John\",\n        \"surname\": \"Doe\",\n        \"dateOfBirth\": \"1980-01-15\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/actor",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Movie created successfully.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"const requestBody = pm.request.body.raw;",
									"const requestJson = JSON.parse(requestBody);",
									"",
									"// Nustatyk kolekcijos kintamuosius",
									"pm.collectionVariables.set('movieId', responseJson.id);",
									"",
									"pm.test(\"Check that returned movie data is correct\", () => {",
									"    // Patikrink, ar filmo pavadinimas sutampa",
									"    pm.expect(responseJson.title).to.eql(requestJson.title);",
									"    ",
									"    // Patikrink, ar aktoriaus ID sutampa",
									"    pm.expect(responseJson.actor_id).to.eql(requestJson.actorId);",
									"});",
									"",
									"pm.test(\"Response status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2 seconds\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"title\": \"Mystery of the Lost City\",\n        \"creationDate\": \"2022-03-22\",\n        \"actorId\": {{actorId}}\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movie",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the created movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('\"Response time is less than 2 seconds', () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000)",
									"}) ",
									"",
									"pm.test(\"Set collection variables 'title' and 'id' with expected values\", () => {",
									"    const responseJSON = pm.response.json();",
									"    pm.collectionVariables.set(\"title\", responseJSON.title);",
									"    pm.collectionVariables.set(\"id\", responseJSON.id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movie/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the list of created movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200)",
									"})",
									"",
									"pm.test(\"Response time is less than 2 seconds\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000)",
									"}) ",
									"",
									"pm.test(\"Check id of movie and title are correct\", () => {",
									"    const id = pm.collectionVariables.get(\"id\");",
									"    const title = pm.collectionVariables.get(\"title\");",
									" ",
									"    const jsonData = pm.response.json();",
									"    const found = jsonData.some(function (item) {",
									"        return item.id === id && item.title === title",
									"    });",
									"    pm.expect(found).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movie",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a movie with an incorrect release date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 400\", () => {",
									"    pm.expect(pm.response.code).to.eql(400)",
									"})",
									"pm.test(\"Returns correct text\", () => {",
									"    pm.expect(pm.response.text()).to.eql('Date of the movie cannot be in the future')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"title\": \"Mystery of the Lost City\",\n        \"creationDate\": \"2080-03-22\",\n        \"actorId\": 121\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movie",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update movie functionality",
			"item": [
				{
					"name": "Create a new movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json()",
									"const requestBody = pm.request.body.raw;",
									"const requestJson = JSON.parse(requestBody);",
									"",
									"pm.collectionVariables.set('movieId', responseJson.id);",
									"",
									"pm.test(\"Check that returned data is correct\", () => {",
									"    pm.expect(responseJson.title).to.eql(requestJson.title);",
									"    pm.expect(responseJson.actor_id).to.eql(requestJson.actorId);",
									"})",
									"",
									"pm.test(\"Response status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2 seconds\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"title\": \"The Great Adventure\",\n        \"creationDate\": \"2023-01-15\",\n        \"actorId\": 121\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movie",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successfully update movie information by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2 seconds\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"const responseJson = pm.response.json()",
									"const requestBody = pm.request.body.raw;",
									"const requestJson = JSON.parse(requestBody)",
									"",
									"pm.collectionVariables.set('movieTitle',requestJson.title)",
									"pm.collectionVariables.set('actor_id',requestJson.actorId)",
									"",
									"pm.test(\"Check that returned data is correct\", () => {",
									"    const movieId = pm.collectionVariables.get(\"movieId\")",
									"    pm.expect(responseJson.id).to.eql(movieId)",
									"    pm.expect(responseJson.title).to.eql(requestJson.title);",
									"    pm.expect(responseJson.actor_id).to.eql(requestJson.actorId);",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"title\": \"The Great Adventure\",\n        \"creationDate\": \"2009-01-15\",\n        \"actorId\": 121\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movie/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a deleted movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"title update correct\", () => {",
									"    const responseJSON = pm.response.json();",
									"    const title = pm.collectionVariables.get(\"movieTitle\");",
									"",
									"    pm.expect(responseJSON.title).to.eql(title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movie/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a list of all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2 seconds\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Check if id, title of movie and actorId update correct\", () => {",
									"    const id = pm.collectionVariables.get(\"id\");",
									"    const title = pm.collectionVariables.get(\"title\");",
									"    const actorId = pm.collectionVariables.get(\"actor_id\"); ",
									"",
									"    const jsonData = pm.response.json();",
									"    const found = jsonData.some(item => {",
									"        return item.id === id &&",
									"               item.title === title &&",
									"               item.actor_id === actorId;",
									"    });",
									"",
									"    pm.expect(found).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movie",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a movie with an ID that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 404\", () => {",
									"    pm.expect(pm.response.code).to.eql(404)",
									"})",
									"pm.test(\"Return correct text\", () => {",
									"    pm.expect(pm.response.text()).to.eql('Movie not found')",
									"})",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"name\": \"Mari\",\n        \"surname\": \"Wilson\",\n        \"dateOfBirth\": \"1992-11-05\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movie/9999999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie",
								"9999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete movie functionality",
			"item": [
				{
					"name": "Create a movie record to be deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"id\": {{movieId}},\n        \"title\": \"Mystery of the Lost City\",\n        \"creationDate\": \"2022-03-22\",\n        \"actorId\": {{actorId}}\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/movie",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a movie by an existing ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 204\", () => {",
									"    pm.expect(pm.response.code).to.eql(204)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movie/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a deleted movie by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movie/{{movieId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a list of all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movie",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting a movie ID that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 404\", () => {",
									"    pm.expect(pm.response.code).to.eql(404)",
									"})",
									"pm.test(\"Returns correct text\", () => {",
									"    pm.expect(pm.response.text()).to.eql('Movie not found')",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/movie/100000000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"movie",
								"100000000"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "actorName",
			"value": ""
		},
		{
			"key": "actorSurname",
			"value": ""
		},
		{
			"key": "actorId",
			"value": ""
		},
		{
			"key": "movieId",
			"value": "",
			"type": "string"
		},
		{
			"key": "movieTitle",
			"value": ""
		},
		{
			"key": "movieCreationDate",
			"value": ""
		},
		{
			"key": "actor_id",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		}
	]
}